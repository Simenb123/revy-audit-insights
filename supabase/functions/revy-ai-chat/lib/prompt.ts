// Proactive insights based on client data
function buildProactiveInsights(client: any): string {
  let insights = '\n\nProaktive innsikter:\n';
  
  // Progress-based insights
  if (client.progress < 25) {
    insights += '- Klienten er i tidlig fase. Fokuser p√• planlegging og risikovurdering.\n';
  } else if (client.progress > 75) {
    insights += '- Klienten n√¶rmer seg ferdigstillelse. Fokuser p√• avslutning og konklusjoner.\n';
  }
  
  // Risk-based insights
  const highRiskAreas = client.risk_areas?.filter((r: any) => r.risk === 'high') || [];
  if (highRiskAreas.length > 0) {
    insights += `- H√òYRISIKO: ${highRiskAreas.map((r: any) => r.name).join(', ')} krever ekstra oppmerksomhet.\n`;
  }
  
  // Industry-specific insights
  if (client.industry) {
    const industryInsights = {
      'Bygg og anlegg': 'V√¶r oppmerksom p√• prosjektregnskapsf√∏ring og WIP-vurderinger.',
      'Handel': 'Fokuser p√• lagerverdsettelse og kundefordringer.',
      'Teknologi': 'Vurder immaterielle eiendeler og utviklingskostnader.',
      'Finans': 'S√¶rlig oppmerksomhet p√• regulatoriske krav og risikostyring.'
    };
    
    const insight = industryInsights[client.industry as keyof typeof industryInsights];
    if (insight) {
      insights += `- Bransje-spesifikt: ${insight}\n`;
    }
  }
  
  // Overdue actions
  const overdueActions = client.client_audit_actions?.filter((action: any) => 
    action.due_date && new Date(action.due_date) < new Date() && action.status !== 'completed'
  ) || [];
  
  if (overdueActions.length > 0) {
    insights += `- FORSINKELSE: ${overdueActions.length} forfalt(e) oppgave(r) krever umiddelbar oppmerksomhet.\n`;
  }
  
  return insights;
}

// Enhanced intelligent system prompt building with database integration
export async function buildIntelligentSystemPrompt(
  context: string, 
  clientData: any, 
  userRole: string,
  enhancedContext: any,
  isGuestMode = false
): Promise<string> {
  
  // Load the latest prompt configuration from database
  const { basePrompt, contextPrompts } = await getLatestPromptConfiguration();
  
  let systemPrompt = basePrompt;

  if (isGuestMode) {
    systemPrompt += `\n\nVIKTIG: Brukeren er i gjestmodus og har begrenset tilgang. Gi generelle r√•d og veiledning, men nevn at full funksjonalitet krever innlogging. Hold svarene enkle og praktiske.`;
  }

  let knowledgePrompt = '';
  let clientPrompt = '';
  let proactivePrompt = '';

  // Enhanced knowledge integration with active article promotion
  if (enhancedContext.knowledge && enhancedContext.knowledge.length > 0) {
    knowledgePrompt = `\n\nüéØ RELEVANT FAGSTOFF FRA KUNNSKAPSBASEN - BRUK DETTE AKTIVT:\n\n`;
    enhancedContext.knowledge.forEach((article: any, index: number) => {
      knowledgePrompt += `üìö ARTIKKEL ${index + 1}: "${article.title}"\n`;
      if (article.reference_code) {
        knowledgePrompt += `üîñ REFERANSE: ${article.reference_code}\n`;
      }
      if (article.tags && article.tags.length > 0) {
        knowledgePrompt += `üè∑Ô∏è EMNER: ${article.tags.join(', ')}\n`;
      }
      knowledgePrompt += `üìù SAMMENDRAG: ${article.summary || (article.content || '').substring(0, 200) + '...'}\n`;
      knowledgePrompt += `üìÑ INNHOLD: ${article.content.substring(0, 1200)}${article.content.length > 1200 ? '...' : ''}\n`;
      knowledgePrompt += `üîó LENKE: [Les hele artikkelen](/fag/artikkel/${article.slug})\n\n`;
    });
    
    knowledgePrompt += `\nüö® KRITISKE INSTRUKSER FOR BRUK AV FAGARTIKLER:
1. Du M√Ö referere til og sitere fra disse artiklene n√•r de er relevante
2. Vis ALLTID lenker til artiklene i markdown-format: [Artikkeltittel](/fag/artikkel/slug)
3. Nevn spesifikke referansekoder (f.eks. ISA 315) n√•r de finnes
4. Gi konkrete sitater fra artiklene med "..." rundt
5. Hvis artikler har tags, nevn dem som relevante emner
6. Strukturer svaret med tydelige referanser til fagstoffet
7. Start gjerne svaret med "Basert p√• v√•rt fagstoff om..." n√•r relevant

EKSEMPEL P√Ö GODT SVAR:
"Basert p√• v√•r artikkel om [ISA 315 - Risikovurdering](/fag/artikkel/isa-315-risikovurdering) kan jeg hjelpe deg med dette. Som det st√•r i standarden: 'Revisor skal...' 

üìö Relevante artikler:
- [Artikkeltittel 1](/fag/artikkel/slug1) - Referanse: ISA 315
- [Artikkeltittel 2](/fag/artikkel/slug2) - Emner: risikovurdering, materialitet"`;
  } else {
    knowledgePrompt = `\n\n‚ö†Ô∏è INGEN SPESIFIKKE ARTIKLER funnet for dette sp√∏rsm√•let i kunnskapsbasen. 

INSTRUKSER N√ÖR INGEN ARTIKLER FINNES:
1. Nevn eksplisitt at du ikke fant spesifikke fagartikler for dette emnet
2. Oppfordre brukeren til √• v√¶re mer spesifikk eller pr√∏ve andre s√∏ketermer
3. Foresl√• relevante emner de kan s√∏ke p√• (f.eks. "ISA 315", "risikovurdering", "materialitet")
4. Gi likevel grundig faglig veiledning basert p√• din kunnskap
5. Avslutt med "üí° Tips: Pr√∏v √• s√∏ke p√• mer spesifikke fagtermer i chatten for √• f√• tilgang til v√•re fagartikler"

Du kan fortsatt gi utmerket faglig r√•d basert p√• din ekspertise, men v√¶r √¶rlig om at du ikke har funnet spesifikke artikler.`;
  }

  // Enhanced client context with proactive insights
  if (enhancedContext.clientContext) {
    const client = enhancedContext.clientContext;
    clientPrompt = `\n\nUtvidet klient-informasjon:\n`;
    clientPrompt += `Klient: ${client.company_name} (${client.org_number})\n`;
    clientPrompt += `Bransje: ${client.industry}\n`;
    clientPrompt += `Fase: ${client.phase}\n`;
    clientPrompt += `Fremgang: ${client.progress}%\n`;
    
    if (client.risk_areas && client.risk_areas.length > 0) {
      clientPrompt += `Risikoomr√•der: ${client.risk_areas.map((r: any) => `${r.name} (${r.risk})`).join(', ')}\n`;
    }

    // Add proactive insights based on data
    proactivePrompt = buildProactiveInsights(client);
  }

  // Get context-specific prompt
  const contextPrompt = contextPrompts[context as keyof typeof contextPrompts] || contextPrompts.general;

  const roleContext = isGuestMode
    ? '\nBrukeren er gjest og har begrenset tilgang. Gi generelle, praktiske r√•d om revisjonsarbeid uten tilgang til spesifikke klientdata.'
    : userRole === 'partner' 
    ? '\nBrukeren er partner og trenger h√∏yniv√• strategisk veiledning om klientportef√∏lje, risikostyring og forretningsutvikling. Fokuser p√• ledelsesperspektiv og beslutningsst√∏tte.'
    : userRole === 'manager'
    ? '\nBrukeren er manager og fokuserer p√• prosjektledelse, kvalitetssikring og teamkoordinering. Gi praktiske ledelses- og koordineringsr√•d.'
    : '\nBrukeren er revisor og trenger praktisk, detaljert veiledning i daglig revisjonsarbeid og tekniske sp√∏rsm√•l. Fokuser p√• h√•ndverk og implementering.';

  return `${systemPrompt}${knowledgePrompt}${clientPrompt}${proactivePrompt}\n\n${contextPrompt}${roleContext}

üî• VIKTIG P√ÖMINNELSE: Du skal v√¶re PROAKTIV med √• bruke fagartikler! N√•r brukere sp√∏r om faglige temaer:
1. Referer ALLTID til relevante artikler n√•r de finnes
2. Vis tydelige lenker i markdown-format
3. Gi konkrete sitater og referanser
4. Nevn tags/emner fra artiklene
5. Oppfordre til videre lesing av hele artikler

${isGuestMode ? 'Nevn gjerne at innlogging gir tilgang til mer avanserte funksjoner.' : 'V√¶r proaktiv med artikkelbruk og faglige referanser. Gj√∏r det enkelt for brukeren √• finne og lese relevante fagartikler.'}`;
}
