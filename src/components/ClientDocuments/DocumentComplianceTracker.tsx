import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { 
  Shield, 
  CheckCircle2, 
  XCircle, 
  AlertTriangle, 
  FileText, 
  Calendar,
  Scale,
  BookOpen,
  Target,
  TrendingUp
} from 'lucide-react';
import { ClientDocument } from '@/hooks/useClientDocumentsList';
import { format } from 'date-fns';
import { nb } from 'date-fns/locale';

interface DocumentComplianceTrackerProps {
  documents: ClientDocument[];
  className?: string;
}

interface ComplianceRule {
  id: string;
  name: string;
  description: string;
  standard: 'ISA' | 'RS' | 'IFRS' | 'GAAP' | 'MÅL';
  severity: 'critical' | 'high' | 'medium' | 'low';
  isRequired: boolean;
  autoCheck: boolean;
}

interface ComplianceCheck {
  id: string;
  ruleId: string;
  documentId: string;
  status: 'compliant' | 'non_compliant' | 'warning' | 'pending';
  checkedAt: string;
  checkedBy: string;
  details?: string;
  autoGenerated: boolean;
}

export const DocumentComplianceTracker: React.FC<DocumentComplianceTrackerProps> = ({
  documents,
  className = ""
}) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedStandard, setSelectedStandard] = useState<string>('all');

  // Mock compliance rules
  const complianceRules: ComplianceRule[] = [
    {
      id: '1',
      name: 'Dokumentasjon av risikovurdering',
      description: 'Alle klienter må ha dokumentert risikovurdering iht. ISA 315',
      standard: 'ISA',
      severity: 'critical',
      isRequired: true,
      autoCheck: true
    },
    {
      id: '2',
      name: 'Vesentlighetsgrense dokumentert',
      description: 'Vesentlighetsgrense må være fastsatt og dokumentert',
      standard: 'ISA',
      severity: 'critical',
      isRequired: true,
      autoCheck: true
    },
    {
      id: '3',
      name: 'Årsregnskapsanalyse',
      description: 'Analytiske handlinger på årsregnskapet må være dokumentert',
      standard: 'RS',
      severity: 'high',
      isRequired: true,
      autoCheck: false
    },
    {
      id: '4',
      name: 'Oppbevaringskrav',
      description: 'Revisjonsdokumentasjon må oppbevares i minimum 5 år',
      standard: 'MÅL',
      severity: 'critical',
      isRequired: true,
      autoCheck: true
    }
  ];

  // Mock compliance checks
  const complianceChecks: ComplianceCheck[] = [
    {
      id: '1',
      ruleId: '1',
      documentId: documents[0]?.id || '',
      status: 'compliant',
      checkedAt: new Date().toISOString(),
      checkedBy: 'AI System',
      autoGenerated: true
    },
    {
      id: '2',
      ruleId: '2',
      documentId: documents[0]?.id || '',
      status: 'warning',
      checkedAt: new Date().toISOString(),
      checkedBy: 'AI System',
      details: 'Vesentlighetsgrense funnet, men mangler dokumentasjon på begrunnelse',
      autoGenerated: true
    },
    {
      id: '3',
      ruleId: '3',
      documentId: documents[1]?.id || '',
      status: 'non_compliant',
      checkedAt: new Date().toISOString(),
      checkedBy: 'Revisor Hansen',
      details: 'Analytiske handlinger ikke tilstrekkelig dokumentert',
      autoGenerated: false
    }
  ];

  const getStatusIcon = (status: ComplianceCheck['status']) => {
    switch (status) {
      case 'compliant':
        return <CheckCircle2 className="h-4 w-4 text-green-500" />;
      case 'non_compliant':
        return <XCircle className="h-4 w-4 text-red-500" />;
      case 'warning':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      default:
        return <AlertTriangle className="h-4 w-4 text-blue-500" />;
    }
  };

  const getStatusColor = (status: ComplianceCheck['status']) => {
    switch (status) {
      case 'compliant':
        return 'bg-green-100 text-green-800';
      case 'non_compliant':
        return 'bg-red-100 text-red-800';
      case 'warning':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-blue-100 text-blue-800';
    }
  };

  const getSeverityColor = (severity: ComplianceRule['severity']) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-100 text-red-800';
      case 'high':
        return 'bg-orange-100 text-orange-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStandardIcon = (standard: ComplianceRule['standard']) => {
    switch (standard) {
      case 'ISA':
        return <Scale className="h-4 w-4" />;
      case 'RS':
        return <BookOpen className="h-4 w-4" />;
      case 'MÅL':
        return <Target className="h-4 w-4" />;
      default:
        return <Shield className="h-4 w-4" />;
    }
  };

  // Calculate compliance statistics
  const totalChecks = complianceChecks.length;
  const compliantChecks = complianceChecks.filter(c => c.status === 'compliant').length;
  const nonCompliantChecks = complianceChecks.filter(c => c.status === 'non_compliant').length;
  const warningChecks = complianceChecks.filter(c => c.status === 'warning').length;
  
  const complianceRate = totalChecks > 0 ? Math.round((compliantChecks / totalChecks) * 100) : 0;

  if (documents.length === 0) {
    return (
      <Card className={className}>
        <CardContent className="flex flex-col items-center justify-center py-12">
          <Shield className="h-12 w-12 text-muted-foreground mb-4" />
          <p className="text-muted-foreground">Ingen dokumenter å sjekke for etterlevelse</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className={`space-y-6 ${className}`}>
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Compliance Tracker
          </CardTitle>
          <CardDescription>
            Spor etterlevelse av revisjonstandarder og forskriftskrav
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="overview">Oversikt</TabsTrigger>
              <TabsTrigger value="rules">Regler</TabsTrigger>
              <TabsTrigger value="checks">Sjekker</TabsTrigger>
              <TabsTrigger value="reports">Rapporter</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-4">
              {/* Compliance Summary */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-muted-foreground">Etterlevelse</p>
                        <p className="text-2xl font-bold text-green-600">{complianceRate}%</p>
                      </div>
                      <TrendingUp className="h-8 w-8 text-green-500" />
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-muted-foreground">Godkjent</p>
                        <p className="text-2xl font-bold text-green-600">{compliantChecks}</p>
                      </div>
                      <CheckCircle2 className="h-8 w-8 text-green-500" />
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-muted-foreground">Advarsler</p>
                        <p className="text-2xl font-bold text-yellow-600">{warningChecks}</p>
                      </div>
                      <AlertTriangle className="h-8 w-8 text-yellow-500" />
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-muted-foreground">Avvik</p>
                        <p className="text-2xl font-bold text-red-600">{nonCompliantChecks}</p>
                      </div>
                      <XCircle className="h-8 w-8 text-red-500" />
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Progress by Standard */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Etterlevelse per standard</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {['ISA', 'RS', 'IFRS', 'MÅL'].map((standard) => {
                    const standardRules = complianceRules.filter(r => r.standard === standard);
                    const standardChecks = complianceChecks.filter(c => 
                      standardRules.some(r => r.id === c.ruleId)
                    );
                    const standardCompliance = standardChecks.length > 0 
                      ? Math.round((standardChecks.filter(c => c.status === 'compliant').length / standardChecks.length) * 100)
                      : 0;

                    return (
                      <div key={standard} className="space-y-2">
                        <div className="flex justify-between items-center">
                          <div className="flex items-center gap-2">
                            {getStandardIcon(standard as ComplianceRule['standard'])}
                            <span className="font-medium">{standard}</span>
                          </div>
                          <span className="text-sm text-muted-foreground">{standardCompliance}%</span>
                        </div>
                        <Progress value={standardCompliance} className="h-2" />
                      </div>
                    );
                  })}
                </CardContent>
              </Card>

              {/* Recent Non-Compliance Issues */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Nylige avvik</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {complianceChecks
                      .filter(c => c.status === 'non_compliant' || c.status === 'warning')
                      .slice(0, 3)
                      .map((check) => {
                        const rule = complianceRules.find(r => r.id === check.ruleId);
                        const document = documents.find(d => d.id === check.documentId);
                        
                        return (
                          <div key={check.id} className="border rounded-lg p-3">
                            <div className="flex items-center justify-between mb-2">
                              <div className="flex items-center gap-2">
                                {getStatusIcon(check.status)}
                                <span className="font-medium text-sm">{rule?.name}</span>
                              </div>
                              <Badge className={getSeverityColor(rule?.severity || 'medium')}>
                                {rule?.severity === 'critical' ? 'Kritisk' :
                                 rule?.severity === 'high' ? 'Høy' :
                                 rule?.severity === 'medium' ? 'Medium' : 'Lav'}
                              </Badge>
                            </div>
                            
                            <p className="text-xs text-muted-foreground mb-1">
                              Dokument: {document?.file_name || 'Ukjent'}
                            </p>
                            
                            {check.details && (
                              <p className="text-xs text-muted-foreground">
                                {check.details}
                              </p>
                            )}
                          </div>
                        );
                      })}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="rules" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Compliance-regler</CardTitle>
                  <CardDescription>
                    Oversikt over alle revisjonstandarder og krav som sjekkes automatisk
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-96">
                    <div className="space-y-3">
                      {complianceRules.map((rule) => (
                        <div key={rule.id} className="border rounded-lg p-4">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              {getStandardIcon(rule.standard)}
                              <span className="font-medium">{rule.name}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Badge variant="outline">{rule.standard}</Badge>
                              <Badge className={getSeverityColor(rule.severity)}>
                                {rule.severity === 'critical' ? 'Kritisk' :
                                 rule.severity === 'high' ? 'Høy' :
                                 rule.severity === 'medium' ? 'Medium' : 'Lav'}
                              </Badge>
                              {rule.autoCheck && (
                                <Badge variant="secondary">Auto</Badge>
                              )}
                            </div>
                          </div>
                          
                          <p className="text-sm text-muted-foreground mb-2">
                            {rule.description}
                          </p>
                          
                          {rule.isRequired && (
                            <div className="flex items-center gap-1 text-xs text-red-600">
                              <AlertTriangle className="h-3 w-3" />
                              Obligatorisk sjekk
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </ScrollArea>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="checks" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Compliance-sjekker</CardTitle>
                  <CardDescription>
                    Detaljert oversikt over alle utførte compliance-sjekker
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-96">
                    <div className="space-y-3">
                      {complianceChecks.map((check) => {
                        const rule = complianceRules.find(r => r.id === check.ruleId);
                        const document = documents.find(d => d.id === check.documentId);
                        
                        return (
                          <div key={check.id} className="border rounded-lg p-4">
                            <div className="flex items-center justify-between mb-2">
                              <div className="flex items-center gap-2">
                                {getStatusIcon(check.status)}
                                <span className="font-medium">{rule?.name}</span>
                              </div>
                              <Badge className={getStatusColor(check.status)}>
                                {check.status === 'compliant' ? 'Godkjent' :
                                 check.status === 'non_compliant' ? 'Avvik' :
                                 check.status === 'warning' ? 'Advarsel' : 'Avventer'}
                              </Badge>
                            </div>
                            
                            <div className="text-xs text-muted-foreground space-y-1">
                              <div className="flex items-center gap-1">
                                <FileText className="h-3 w-3" />
                                {document?.file_name || 'Ukjent dokument'}
                              </div>
                              <div className="flex items-center gap-1">
                                <Calendar className="h-3 w-3" />
                                Sjekket {format(new Date(check.checkedAt), 'dd.MM.yyyy HH:mm', { locale: nb })} av {check.checkedBy}
                              </div>
                            </div>

                            {check.details && (
                              <div className="mt-2 pt-2 border-t">
                                <p className="text-xs text-muted-foreground">
                                  <strong>Detaljer:</strong> {check.details}
                                </p>
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </ScrollArea>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="reports" className="space-y-4">
              <Alert>
                <Shield className="h-4 w-4" />
                <AlertDescription>
                  Generer compliance-rapporter for internkontroll og myndighetskrav.
                </AlertDescription>
              </Alert>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">ISA Compliance Rapport</CardTitle>
                    <CardDescription>
                      Detaljert rapport for ISA-standarder
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Button className="w-full">
                      Generer ISA-rapport
                    </Button>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Kvalitetskontroll Rapport</CardTitle>
                    <CardDescription>
                      Samlet rapport for kvalitetssikring
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Button className="w-full">
                      Generer QC-rapport
                    </Button>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};