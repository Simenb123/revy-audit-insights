
import { supabase, isSupabaseConfigured } from '@/integrations/supabase/client';
import { RevyContext, RevyChatMessage } from '@/types/revio';
import { log, error } from '@/utils/logger';

// Generate AI response using Supabase Edge Function with enhanced context and knowledge integration
export const generateAIResponse = async (
  message: string, 
  context: RevyContext,
  history: RevyChatMessage[],
  clientData?: any,
  userRole?: string,
  sessionId?: string
): Promise<string> => {
  if (!isSupabaseConfigured || !supabase) {
    error('Supabase is not configured. AI response cannot proceed.');
    throw new Error("Supabase not initialized");
  }
  log('üöÄ Calling generateAIResponse service', {
    context,
    hasClientData: !!clientData,
    userRole,
    messageLength: message.length,
    historyLength: history.length,
  });

  try {
    // Get current user
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      error('‚ùå Authentication error in generateAIResponse:', userError?.message || 'No user found');
      throw new Error('Du m√• v√¶re logget inn for √• bruke AI-assistenten');
    }

    log('‚úÖ User authenticated for AI call:', { userId: user.id });

    const simplifiedHistory = history.map(msg => ({ sender: msg.sender, content: msg.content }));

    const requestBody = {
      message,
      context,
      history: simplifiedHistory,
      clientData,
      userRole,
      sessionId,
      userId: user.id
    };

    log('üì§ Sending request to revy-ai-chat edge function');

    const { data, error } = await supabase.functions.invoke('revy-ai-chat', {
      body: requestBody
    });

    if (error) {
      error('‚ùå Supabase function invocation error:', error);
      
      // More specific error handling
      if (error.message?.includes('FunctionsHttpError')) {
        return getFallbackResponse(context, 'service_unavailable');
      } else if (error.message?.includes('AuthError')) {
        throw new Error('Autorisasjonsfeil. Logg ut og inn igjen.');
      } else {
        const errorMessage = error.context?.msg || error.message || 'Ukjent feil fra AI-tjenesten';
        log('üÜò Using fallback response for error:', errorMessage);
        return getFallbackResponse(context, 'ai_error', errorMessage);
      }
    }

    if (data?.isError) {
      error('‚ùå Error response from AI function:', data.error);
      // Return the fallback response if it exists, otherwise use our fallback
      if (data.response) {
        return data.response;
      }
      return getFallbackResponse(context, 'ai_error', data.error);
    }

    if (!data || !data.response) {
      error('‚ùå Invalid response structure from AI function:', data);
      return getFallbackResponse(context, 'general');
    }

    log('‚úÖ AI response received successfully', { responseLength: data.response.length });
    return data.response;

  } catch (error) {
    error('üí• Final catch block in generateAIResponse:', error);
    
    // Enhanced fallback responses based on error type and context
    if (error instanceof Error) {
      if (error.message.includes('logget inn')) {
        throw error; // Re-throw auth errors as-is
      } else if (error.message.includes('utilgjengelig')) {
        return getFallbackResponse(context, 'service_unavailable');
      } else if (error.message.includes('AI-feil')) {
        return getFallbackResponse(context, 'ai_error');
      }
    }
    
    // Generic fallback
    return getFallbackResponse(context, 'general');
  }
};

// Enhanced fallback responses based on context with helpful revision guidance
const getFallbackResponse = (context: RevyContext, errorType: string, errorDetails?: string): string => {
  const baseMessage = "Beklager, jeg opplever tekniske problemer akkurat n√•.";
  
  const contextSpecificHelp = {
    'risk-assessment': `I mellomtiden kan du se p√• ISA 315-standarden for risikovurdering og planlegge revisjonshandlinger basert p√• identifiserte risikoomr√•der.

**Viktige risikoomr√•der √• vurdere:**
- Inntektsf√∏ring og omsetning
- Varelager og verdivurdering  
- Kundefordringer og tapsavsetninger
- Leverand√∏rgjeld og periodiseringer
- Ledelsens skj√∏nnsmessige vurderinger

**ISA 315 hovedkrav:**
- Forst√• enheten og dens omgivelser
- Identifiser og vurder risiko for vesentlig feilinformasjon
- Evaluer internkontrollsystemer
- Dokumenter risikovurderinger grundig`,

    'documentation': `Du kan fortsette med dokumentasjon i henhold til ISA 230-kravene mens jeg blir tilgjengelig igjen.

**ISA 230 dokumentasjonskrav:**
- Tilstrekkelig og hensiktsmessig revisjonsbevis
- Dokumenter arten, tidspunktet og omfanget av revisjonshandlinger
- Resultater og konklusjoner av revisjonsarbeidet
- Betydelige profesjonelle vurderinger og grunnlaget for disse

**Dokumentasjonstips:**
- Bruk konsistente maler og strukturer
- Skriv klare og konsise konklusjoner
- Dokumenter avvik og oppf√∏lgingshandlinger
- S√∏rg for sporbarhet og gjennomg√•elsesmuligheter`,

    'client-detail': `Du kan gjennomg√• klientinformasjon og tidligere revisjoner mens jeg l√∏ser tekniske problemer.

**Klientforst√•else - n√∏kkelomr√•der:**
- Bransje og markedsforhold
- Forretningsmodell og strategier
- Organisasjonsstruktur og ledelse
- IT-systemer og regnskapsprosesser
- Tidligere revisjoner og anbefalinger

**Planleggingssp√∏rsm√•l:**
- Har det v√¶rt endringer i ledelse eller eierskap?
- Er det nye regnskapsstandarder som p√•virker?
- Hvilke omr√•der hadde feil i forrige revisjon?`,

    'collaboration': `Du kan koordinere med teamet ditt og fordele arbeidsoppgaver manuelt inntil systemet fungerer igjen.

**Teamkoordinering:**
- Organiser teamm√∏ter for oppgavefordeling
- Sett opp felles kalender for revisjonsaktiviteter
- Definer ansvarsomr√•der og tidsfrister
- Etabler kommunikasjonskanaler for daglig oppf√∏lging

**Kvalitetssikring:**
- Implementer review-prosesser mellom teammedlemmer
- Bruk sjekklister for kritiske revisjonsomr√•der
- Dokumenter alle avklaringer og beslutninger`,

    'general': `Du kan fortsette med ditt revisjonsarbeid og komme tilbake til meg senere.

**Generelle revisjonstips:**
- Start med planlegging og risikovurdering
- F√∏lg ISA-standardenes systematiske tiln√¶rming
- Dokumenter alt revisjonsarbeid grundig
- Hold fokus p√• materialitet og risiko
- Kommuniser l√∏pende med klient og team

**Nyttige ressurser:**
- ISA-h√•ndb√∏ker og veiledninger
- Bransjespesifikke revisjonsguider
- Regnskapsstandarder (NGRS/IFRS)
- Den norske revisorforeningens ressurser`
  };

  const errorMessages = {
    'service_unavailable': `${baseMessage} Tjenesten er midlertidig nede for vedlikehold.`,
    'ai_error': `${baseMessage} AI-modellen returnerte en feil${errorDetails ? `: ${errorDetails}` : ''}.`,
    'general': `${baseMessage} En teknisk feil oppstod.`
  };

  const errorMsg = errorMessages[errorType as keyof typeof errorMessages] || errorMessages.general;
  const contextHelp = contextSpecificHelp[context] || contextSpecificHelp.general;
  
  return `${errorMsg}\n\n${contextHelp}\n\nüí° **Tips:** Pr√∏v igjen om noen minutter, eller kontakt support hvis problemet vedvarer. I mellomtiden kan du bruke veiledningen ovenfor til √• fortsette med revisjonsarbeidet.`;
};

// Mock function for knowledge integration (to be implemented)
export const getRelevantKnowledge = async (query: string, context: RevyContext): Promise<string[]> => {
  // This would integrate with the knowledge base
  // For now, return empty array
  return [];
};
